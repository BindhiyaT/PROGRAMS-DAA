1.Linear search in C

#include <stdio.h>
int search(int arr[], int N, int x)
{
	for (int i = 0; i < N; i++)
		if (arr[i] == x)
			return i;
	return -1;
}

int main(void)
{
	int arr[] = { 2, 3, 4, 10, 40 };
	int x = 10;
	int N = sizeof(arr) / sizeof(arr[0]);

	// Function call
	int result = search(arr, N, x);
	(result == -1)
		? printf("Element is not present in array")
		: printf("Element is present at index %d", result);
	return 0;
}

*ALGORITHM FOR LINEAR SEARCH:
Step 1: set pos = -1  
Step 2: set i = 1  
Step 3: repeat step 4 while i <= n  
Step 4: if a[i] == val  
set pos = i  
print pos  
go to step 6  
[end of if]  
set ii = i + 1  
[end of loop]  
Step 5: if pos = -1  
print "value is not present in the array "  
[end of if]  
Step 6: exit  

* TIME COMPLEXITY FOR LINEAR SEARCH:
Best Case: O (1)
Average Case: O (n)
Worst Case: O (n)

2.Insertion Sort in C:

#include <math.h>
#include <stdio.h>

void insertionSort(int arr[], int n)
{
	int i, key, j;
	for (i = 1; i < n; i++)
	{
		key = arr[i];
		j = i - 1;

		/* Move elements of arr[0..i-1],
		that are greater than key,
		to one position ahead of
		their current position */
		while (j >= 0 && arr[j] > key)
		{
			arr[j + 1] = arr[j];
			j = j - 1;
		}
		arr[j + 1] = key;
	}
}

void printArray(int arr[], int n)
{
	int i;
	for (i = 0; i < n; i++)
		printf("%d ", arr[i]);
	printf("\n");
}
int main()
{
	int arr[] = {12, 11, 13, 5, 6};
	int n = sizeof(arr) / sizeof(arr[0]);

	insertionSort(arr, n);
	printArray(arr, n);

	return 0;
}

*ALGORITHM FOR INSERTION SORT:
Step 1 - If the element is the first element, assume that it is already sorted. Return 1.

Step2 - Pick the next element, and store it separately in a key.

Step3 - Now, compare the key with all elements in the sorted array.

Step 4 - If the element in the sorted array is smaller than the current element, then move to the next element. Else, shift greater elements in the array towards the right.

Step 5 - Insert the value.

Step 6 - Repeat until the array is sorted.

* TIME COMPLEXITY FOR INSERTION SORT:
Best Case: O(n)
Worst Case: O(n2)
Average Case: 	O(n2)

3.SELECTION SORT PROGRAM:
#include <stdio.h>
void swap(int *a, int *b) {
  int temp = *a;
  *a = *b;
  *b = temp;
}

void selectionSort(int array[], int size) {
  for (int step = 0; step < size - 1; step++) {
    int min_idx = step;
    for (int i = step + 1; i < size; i++) {
      if (array[i] < array[min_idx])
        min_idx = i;
    }
    swap(&array[min_idx], &array[step]);
  }
}
void printArray(int array[], int size) {
  for (int i = 0; i < size; ++i) {
    printf("%d  ", array[i]);
  }
  printf("\n");
}
int main() {
  int data[] = {20, 12, 10, 15, 2};
  int size = sizeof(data) / sizeof(data[0]);
  selectionSort(data, size);
  printf("Sorted array in Acsending Order:\n");
  printArray(data, size);
}

* ALGORITHM FOR SELECTION SORT:

Step 1: Set Min to location 0 in Step 1.

Step 2: Look for the smallest element on the list.

Step 3: Replace the value at location Min with a different value.

Step 4: Increase Min to point to the next element

Step 5: Continue until the list is sorted.

* TIME COMPLEXITY FOR SELECTION SORT:
Best Case: O(n2)
Worst Case: O(n2)
Average Case: O(n2)

4. BUBBLE SORT PROGRAM:
#include <stdio.h>
void bubbleSort(int array[], int size) {
  for (int step = 0; step < size - 1; ++step) {
    for (int i = 0; i < size - step - 1; ++i) {
      if (array[i] > array[i + 1]) {
        int temp = array[i];
        array[i] = array[i + 1];
        array[i + 1] = temp;
      }
    }
  }
}
void printArray(int array[], int size) {
  for (int i = 0; i < size; ++i) {
    printf("%d  ", array[i]);
  }
  printf("\n");
}

int main() {
  int data[] = {-2, 45, 0, 11, -9};
  
  int size = sizeof(data) / sizeof(data[0]);

  bubbleSort(data, size);
   printf("Sorted Array in Ascending Order:\n");
  printArray(data, size);
}
* ALGORITHM FOR BUBBLE SORT:
Step1: for k = 0 to n-1 repeat Step 2

Step2: for j = k + 1 to n â€“ k repeat

Step3: if A[j] > A[k]

             Swap A[j] and A[k]

             [end of inner for loop]

             [end if outer for loop]
Step4: end

* TIME COMPLEXITY FOR BUBBLE SORT:
Best Case: O(n)
Worst Case: O(n2)
Average Case: O(n2)

5) GCD OF NUMBERS USING EUCLIDEAN FORMULA:
#include <stdio.h>
int gcd(int a, int b)
{
	if (a == 0)
		return b;
	return gcd(b % a, a);
}
int main()
{
	int a = 60, b = 25;
	printf("GCD(%d, %d) = %d\n", a, b, gcd(a, b));
	a = 35, b = 10;
	printf("GCD(%d, %d) = %d\n", a, b, gcd(a, b));
	a = 31, b = 2;
	printf("GCD(%d, %d) = %d\n", a, b, gcd(a, b));
	return 0;
}

* ALGORITHM FOR GCD OF 2 NUMBERS:
Step 1:  Let  a, b  be the two numbers
Step 2:  a mod b = R
Step 3:  Let  a = b  and  b = R
Step 4:  Repeat Steps 2 and 3 until  a mod b  is greater than 0
Step 5:  GCD = b
Step 6: Finish

* TIME COMPLEXITY FOR GCD OF 2 NUMBERS:
Worst Case: O(log(min(A,B))
Average Case: O(log A)
Best Case: O(1)
